mainmenu_name "Linux/MIPS Kernel Configuration"

mainmenu_option next_comment
comment 'Code maturity level options'
bool 'Prompt for development and/or incomplete code/drivers' CONFIG_EXPERIMENTAL
endmenu

mainmenu_option next_comment
comment 'Loadable module support'
bool 'Enable loadable module support' CONFIG_MODULES
if [ "$CONFIG_MODULES" = "y" ]; then
   bool '  Set version information on all module symbols' CONFIG_MODVERSIONS
   bool '  Kernel module loader' CONFIG_KMOD
fi
endmenu

mainmenu_option next_comment
comment 'Machine selection'
dep_bool 'Support for Acer PICA 1 chipset (EXPERIMENTAL)' CONFIG_ACER_PICA_61 $CONFIG_EXPERIMENTAL
dep_bool 'Support for Alchemy Semi PB1000 board' CONFIG_MIPS_PB1000 $CONFIG_MIPS32
if [ "$CONFIG_MIPS_PB1000" = "y" ]; then
   bool '  Support for PCI AUTO Config' CONFIG_PCI_AUTO
fi
dep_bool 'Support for Alchemy Semi PB1100 board' CONFIG_MIPS_PB1100 $CONFIG_MIPS32
dep_bool 'Support for Alchemy Semi PB1500 board' CONFIG_MIPS_PB1500 $CONFIG_MIPS32
dep_bool 'Support for Algorithmics P4032 (EXPERIMENTAL)' CONFIG_ALGOR_P4032 $CONFIG_EXPERIMENTAL
dep_bool 'Support for BAGET MIPS series (EXPERIMENTAL)' CONFIG_BAGET_MIPS $CONFIG_MIPS32 $CONFIG_EXPERIMENTAL
dep_bool 'Support for Cobalt Server (EXPERIMENTAL)' CONFIG_MIPS_COBALT $CONFIG_EXPERIMENTAL
dep_bool 'Support for DECstations' CONFIG_DECSTATION $CONFIG_MIPS32
dep_bool 'Support for Galileo EV64120 Evaluation board (EXPERIMENTAL)' CONFIG_MIPS_EV64120 $CONFIG_EXPERIMENTAL
if [ "$CONFIG_MIPS_EV64120" = "y" ]; then
   bool '  Enable Second PCI (PCI1)' CONFIG_EVB_PCI1
   choice '  Galileo Chip Clock' \
	"75	CONFIG_SYSCLK_75 \
	 83.3	CONFIG_SYSCLK_83 \
	 100	CONFIG_SYSCLK_100" 83.3
fi
dep_bool 'Support for Galileo EV96100 Evaluation board (EXPERIMENTAL)' CONFIG_MIPS_EV96100 $CONFIG_EXPERIMENTAL
bool 'Support for Globespan IVR board' CONFIG_MIPS_IVR
bool 'Support for Hewlett Packard LaserJet board' CONFIG_HP_LASERJET
bool 'Support for ITE 8172G board' CONFIG_MIPS_ITE8172
if [ "$CONFIG_MIPS_ITE8172" = "y" ]; then
   bool '  Support for older IT8172 (Rev C)' CONFIG_IT8172_REVC
fi
dep_bool 'Support for MIPS Atlas board (EXPERIMENTAL)' CONFIG_MIPS_ATLAS $CONFIG_EXPERIMENTAL
bool 'Support for MIPS Magnum 4000' CONFIG_MIPS_MAGNUM_4000
dep_bool 'Support for MIPS Malta board (EXPERIMENTAL)' CONFIG_MIPS_MALTA $CONFIG_EXPERIMENTAL
dep_bool 'Support for MIPS SEAD board (EXPERIMENTAL)' CONFIG_MIPS_SEAD $CONFIG_EXPERIMENTAL
bool 'Support for Momentum Ocelot board' CONFIG_MOMENCO_OCELOT
bool 'Support for Momentum Ocelot-G board' CONFIG_MOMENCO_OCELOT_G
dep_bool 'Support for NEC DDB Vrc-5074 (EXPERIMENTAL)' CONFIG_DDB5074 $CONFIG_EXPERIMENTAL
bool 'Support for NEC DDB Vrc-5476' CONFIG_DDB5476
bool 'Support for NEC DDB Vrc-5477' CONFIG_DDB5477
if [ "$CONFIG_DDB5477" = "y" ]; then
   int '   bus frequency (in kHZ, 0 for auto-detect)' CONFIG_DDB5477_BUS_FREQUENCY 0
fi
bool 'Support for NEC Osprey board' CONFIG_NEC_OSPREY
bool 'Support for NEC Eagle/Hawk board' CONFIG_NEC_EAGLE
bool 'Support for Olivetti M700-10' CONFIG_OLIVETTI_M700
dep_bool 'Support for Philips Nino (EXPERIMENTAL)' CONFIG_NINO $CONFIG_MIPS32 $CONFIG_EXPERIMENTAL
if [ "$CONFIG_NINO" = "y" ]; then
   choice 'Nino Model Number' \
	"Model-300/301/302/319			CONFIG_NINO_4MB \
	 Model-200/210/312/320/325/350/390	CONFIG_NINO_8MB \
	 Model-500/510				CONFIG_NINO_16MB" Model-200
fi
bool 'Support for SGI IP22 (Indy/Indigo2)' CONFIG_SGI_IP22
dep_bool 'Support for SGI-IP27 (Origin200/2000)' CONFIG_SGI_IP27 $CONFIG_MIPS64
if [ "$CONFIG_SGI_IP27" = "y" ]; then
   bool '  IP27 N-Mode' CONFIG_SGI_SN0_N_MODE
   bool '  Discontiguous Memory Support' CONFIG_DISCONTIGMEM
   bool '  NUMA Support' CONFIG_NUMA
   bool '  Mapped kernel support' CONFIG_MAPPED_KERNEL
   bool '  Kernel text replication support' CONFIG_REPLICATE_KTEXT
   bool '  Exception handler replication support' CONFIG_REPLICATE_EXHANDLERS
   bool '  Multi-Processing support' CONFIG_SMP
   #bool '  IP27 XXL' CONFIG_SGI_SN0_XXL
fi
dep_bool 'Support for SGI-IP32 (O2) (EXPERIMENTAL)' CONFIG_SGI_IP32 $CONFIG_EXPERIMENTAL
dep_bool 'Support for Broadcom BCM1xxx SOCs (EXPERIMENTAL)' CONFIG_SIBYTE_SB1xxx_SOC $CONFIG_EXPERIMENTAL
if [ "$CONFIG_SIBYTE_SB1xxx_SOC" = "y" ]; then
   choice '   BCM1xxx SOC Type' \
	  "BCM1250          CONFIG_SIBYTE_SB1250" BCM1250

   bool '   Running under simulation' CONFIG_SIMULATION
   bool '   Booting from CFE' CONFIG_SIBYTE_CFE
   dep_bool '     Use firmware console' CONFIG_SIBYTE_CFE_CONSOLE $CONFIG_SIBYTE_CFE
   if [ "$CONFIG_SIBYTE_CFE" = "n" ]; then
      define_bool CONFIG_SIBYTE_STANDALONE y
      int  '   Memory size (in megabytes)' CONFIG_SIBYTE_STANDALONE_RAM_SIZE 32
   fi

   bool '   Support for SB1/SOC profiling - SB1/SCD perf counters' CONFIG_SIBYTE_SB1250_PROF
   bool '   Support for ZBbus profiling' CONFIG_BCM1250_TBPROF

   if [ "$CONFIG_SIBYTE_SB1250" = "y" ]; then
      if [ "$CONFIG_SIBYTE_STANDALONE" != "y" ]; then
	 bool '   Multi-Processing support' CONFIG_SMP
      fi
   fi

   if [ "$CONFIG_SIBYTE_SB1250" = "y" ]; then
      bool '   Support for BCM1250/BCM112x onchip PCI controller' CONFIG_PCI
   fi

   if [ "$CONFIG_SIBYTE_SB1250" = "y" ]; then
      bool '   Support for SWARM board' CONFIG_SIBYTE_SWARM
   fi
fi
bool 'Support for SNI RM200 PCI' CONFIG_SNI_RM200_PCI
dep_bool 'Support for Toshiba JMR-TX3927 board' CONFIG_TOSHIBA_JMR3927 $CONFIG_MIPS32
bool 'Support for ZAO Networks Capcella' CONFIG_ZAO_CAPCELLA

dep_bool 'High Memory Support' CONFIG_HIGHMEM $CONFIG_MIPS32

define_bool CONFIG_RWSEM_GENERIC_SPINLOCK y
define_bool CONFIG_RWSEM_XCHGADD_ALGORITHM n

#
# Select some configuration options automatically based on user selections.
#

if [ "$CONFIG_ACER_PICA_61" = "y" ]; then
   define_bool CONFIG_ARC32 y
   define_bool CONFIG_I8259 y
   define_bool CONFIG_ISA y
   define_bool CONFIG_MIPS_JAZZ y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_ROTTEN_IRQ y
   define_bool CONFIG_OLD_TIME_C y
fi
if [ "$CONFIG_MIPS_PB1000" = "y" ]; then
   define_bool CONFIG_MIPS_AU1000 y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_AU1000_USB_DEVICE y
fi
if [ "$CONFIG_MIPS_PB1100" = "y" ]; then
   define_bool CONFIG_MIPS_AU1000 y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_PCI y
   define_bool CONFIG_PCI_AUTO n
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_AU1000_USB_DEVICE y
fi
if [ "$CONFIG_MIPS_PB1500" = "y" ]; then
   define_bool CONFIG_MIPS_AU1000 y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_AU1000_USB_DEVICE y
fi
if [ "$CONFIG_ALGOR_P4032" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_OLD_TIME_C y
fi
if [ "$CONFIG_MIPS_COBALT" = "y" ]; then
   define_bool CONFIG_COBALT_LCD y
   define_bool CONFIG_I8259 y
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
fi
if [ "$CONFIG_DECSTATION" = "y" ]; then
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NONCOHERENT_IO y
fi
if [ "$CONFIG_MIPS_EV64120" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_ISA n
   define_bool CONFIG_MIPS_GT64120 y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_OLD_TIME_C y
fi
if [ "$CONFIG_MIPS_EV96100" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_MIPS_GT96100 y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_SWAP_IO_SPACE y
fi
if [ "$CONFIG_MIPS_IVR" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_IT8172_CIR y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
fi
if [ "$CONFIG_HP_LASERJET" = "y" ]; then
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI y
   #not yet define_bool CONFIG_PCI_AUTO y
fi
if [ "$CONFIG_MIPS_ITE8172" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_IT8712 y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_IT8172_CIR y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
fi
if [ "$CONFIG_MIPS_ATLAS" = "y" ]; then
   define_bool CONFIG_BOOT_ELF32 y
   define_int CONFIG_L1_CACHE_SHIFT 5
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI y
   define_bool CONFIG_SWAP_IO_SPACE y
fi
if [ "$CONFIG_MIPS_MAGNUM_4000" = "y" -o \
     "$CONFIG_OLIVETTI_M700"    = "y" ]; then
   define_bool CONFIG_ARC32 y
   define_bool CONFIG_I8259 y
   define_bool CONFIG_ISA y
   define_bool CONFIG_FB y
   define_bool CONFIG_FB_G364 y
   define_bool CONFIG_MIPS_JAZZ y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_OLD_TIME_C y
fi
if [ "$CONFIG_MIPS_MALTA" = "y" ]; then
   define_bool CONFIG_BOOT_ELF32 y
   define_bool CONFIG_HAVE_STD_PC_SERIAL_PORT y
   define_bool CONFIG_I8259 y
   define_int CONFIG_L1_CACHE_SHIFT 5
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_PCI y
fi
if [ "$CONFIG_MIPS_SEAD" = "y" ]; then
   define_int CONFIG_L1_CACHE_SHIFT 5
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI n
fi
if [ "$CONFIG_MOMENCO_OCELOT" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_SYSCLK_100 y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_OLD_TIME_C y
fi
if [ "$CONFIG_MOMENCO_OCELOT_G" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_SYSCLK_100 y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_OLD_TIME_C y
fi
if [ "$CONFIG_DDB5074" = "y" ]; then
   define_bool CONFIG_HAVE_STD_PC_SERIAL_PORT y
   define_bool CONFIG_I8259 y
   define_bool CONFIG_ISA y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_PCI y
fi
if [ "$CONFIG_DDB5476"  = "y" ]; then
   define_bool CONFIG_ISA y
   define_bool CONFIG_PCI y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_I8259 y
   define_bool CONFIG_HAVE_STD_PC_SERIAL_PORT y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
fi
if [ "$CONFIG_DDB5477" = "y" ]; then
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_DUMMY_KEYB y
   define_bool CONFIG_I8259 y
fi
if [ "$CONFIG_NEC_OSPREY" = "y" ]; then
   define_bool CONFIG_VR4181 y
   define_bool CONFIG_SERIAL y
   define_bool CONFIG_SERIAL_MANY_PORTS y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_DUMMY_KEYB y
   define_bool CONFIG_SCSI n
fi
if [ "$CONFIG_NEC_EAGLE" = "y" ]; then
   define_bool CONFIG_CPU_VR41XX y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_VR41XX_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_ISA n
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_DUMMY_KEYB y
   define_bool CONFIG_SCSI n
fi
if [ "$CONFIG_NINO" = "y" ]; then
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
fi
if [ "$CONFIG_SGI_IP22" = "y" ]; then
   define_bool CONFIG_ARC32 y
   define_bool CONFIG_ARC_CONSOLE y
   define_bool CONFIG_ARC_MEMORY y
   define_bool CONFIG_BOARD_SCACHE y
   define_bool CONFIG_BOOT_ELF32 y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_IRQ_CPU y
   define_int CONFIG_L1_CACHE_SHIFT 5
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_SGI y
fi
if [ "$CONFIG_SGI_IP27" = "y" ]; then
   define_bool CONFIG_BOOT_ELF64 y
   define_bool CONFIG_ARC64 y
   #define_bool CONFIG_MAPPED_PCI_IO y
   define_bool CONFIG_PCI y
   define_bool CONFIG_QL_ISP_A64 y
   define_int CONFIG_L1_CACHE_SHIFT 7
fi
if [ "$CONFIG_SGI_IP32" = "y" ]; then
   define_bool CONFIG_ARC_MEMORY y
   define_bool CONFIG_ARC32 y
   #define_bool CONFIG_BOARD_SCACHE y
   define_bool CONFIG_BOOT_ELF32 y
   define_int CONFIG_L1_CACHE_SHIFT 5
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_PCI y
fi
if [ "$CONFIG_SIBYTE_SB1250" = "y" ]; then
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_DUMMY_KEYB y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_BOOT_ELF32 y
fi
if [ "$CONFIG_SNI_RM200_PCI" = "y" ]; then
   define_bool CONFIG_ARC32 y
   define_bool CONFIG_ARC_MEMORY y
   define_bool CONFIG_I8259 y
   define_bool CONFIG_ISA y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_OLD_TIME_C y
   define_bool CONFIG_PC_KEYB y
   define_bool CONFIG_PCI y
fi
if [ "$CONFIG_TOSHIBA_JMR3927" = "y" ]; then
   define_bool CONFIG_TOSHIBA_BOARDS y
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_SWAP_IO_SPACE y
   define_bool CONFIG_PC_KEYB y
fi
if [ "$CONFIG_ZAO_CAPCELLA" = "y" ]; then
   define_bool CONFIG_CPU_VR41XX y
   define_bool CONFIG_CPU_LITTLE_ENDIAN y
   define_bool CONFIG_NEW_IRQ y
   define_bool CONFIG_IRQ_CPU y
   define_bool CONFIG_NEW_TIME_C y
   define_bool CONFIG_VR41XX_TIME_C y
   define_bool CONFIG_NONCOHERENT_IO y
   define_bool CONFIG_ISA n
   define_bool CONFIG_PCI y
   define_bool CONFIG_NEW_PCI y
   define_bool CONFIG_PCI_AUTO y
   define_bool CONFIG_DUMMY_KEYB y
   define_bool CONFIG_SCSI n
fi

if [ "$CONFIG_MIPS_AU1000" != "y" ]; then
   define_bool CONFIG_MIPS_AU1000 n
fi
endmenu

mainmenu_option next_comment
comment 'CPU selection'

choice 'CPU type' \
	"MIPS32	CONFIG_CPU_MIPS32 \
	 MIPS64	CONFIG_CPU_MIPS64 \
	 R3000	CONFIG_CPU_R3000 \
	 R39XX	CONFIG_CPU_TX39XX \
	 R41xx	CONFIG_CPU_VR41XX \
	 R4300	CONFIG_CPU_R4300 \
	 R4x00	CONFIG_CPU_R4X00 \
	 R49XX	CONFIG_CPU_TX49XX \
	 R5000	CONFIG_CPU_R5000 \
	 R5432	CONFIG_CPU_R5432 \
	 R6000	CONFIG_CPU_R6000 \
	 R52xx	CONFIG_CPU_NEVADA \
	 R8000	CONFIG_CPU_R8000 \
	 R10000	CONFIG_CPU_R10000 \
	 RM7000	CONFIG_CPU_RM7000 \
	 SB1	CONFIG_CPU_SB1" R4x00

if [ "$CONFIG_CPU_R5000" = "y" ]; then
   define_bool CONFIG_BOARD_SCACHE y
fi

if [ "$CONFIG_CPU_NEVADA" = "y" ]; then
   define_bool CONFIG_BOARD_SCACHE y
fi
 
if [ "$CONFIG_CPU_MIPS32" = "y" ]; then
   define_bool CONFIG_CPU_HAS_PREFETCH y
   bool '  Support for Virtual Tagged I-cache' CONFIG_VTAG_ICACHE
fi

if [ "$CONFIG_CPU_MIPS64" = "y" ]; then
   define_bool CONFIG_CPU_HAS_PREFETCH y
   bool '  Support for Virtual Tagged I-cache' CONFIG_VTAG_ICACHE
fi

if [ "$CONFIG_CPU_RM7000" = "y" ]; then
   define_bool CONFIG_CPU_HAS_PREFETCH y
fi

if [ "$CONFIG_CPU_SB1" = "y" ]; then
   choice 'SB1 Pass' \
	 "Pass1   CONFIG_CPU_SB1_PASS_1  \
	  Pass2   CONFIG_CPU_SB1_PASS_2
	  Pass2.2 CONFIG_CPU_SB1_PASS_2_2" Pass1
   if [ "$CONFIG_CPU_SB1_PASS_1" = "y" ]; then
      define_bool CONFIG_SB1_PASS_1_WORKAROUNDS y
   fi
   if [ "$CONFIG_CPU_SB1_PASS_2" = "y" ]; then
      define_bool CONFIG_SB1_PASS_2_WORKAROUNDS y
   else
      # Avoid prefetches on Pass 2 (before 2.2)
      bool '  Enable prefetches' CONFIG_CPU_HAS_PREFETCH
   fi
   if [ "$CONFIG_CPU_SB1_PASS_2_2" = "y" ]; then
      # XXXKW for now, let 2.2 use same WORKAROUNDS flag as pre-2.2
      define_bool CONFIG_SB1_PASS_2_WORKAROUNDS y
   fi
   bool '  Support for SB1 Cache Error handler' CONFIG_SB1_CACHE_ERROR
   dep_bool '    Ignore recoverable cache errors' CONFIG_SB1_CERR_IGNORE_RECOVERABLE $CONFIG_SB1_CACHE_ERROR
   dep_bool '    Spin instead of running handler' CONFIG_SB1_CERR_SPIN $CONFIG_SB1_CACHE_ERROR
   define_bool CONFIG_VTAG_ICACHE y
fi

if [ "$CONFIG_CPU_R4X00"  = "y" -o \
     "$CONFIG_CPU_R5000"  = "y" -o \
     "$CONFIG_CPU_RM7000" = "y" -o \
     "$CONFIG_CPU_R10000" = "y" -o \
     "$CONFIG_CPU_SB1"    = "y" -o \
     "$CONFIG_CPU_MIPS32" = "y" -o \
     "$CONFIG_CPU_MIPS64" = "y" ]; then
   dep_bool '  Support for 64-bit physical address space' CONFIG_64BIT_PHYS_ADDR $CONFIG_MIPS32
fi

dep_bool 'Override CPU Options' CONFIG_CPU_ADVANCED $CONFIG_MIPS32
if [ "$CONFIG_CPU_ADVANCED" = "y" ]; then
   bool '  ll/sc Instructions available' CONFIG_CPU_HAS_LLSC
   bool '  lld/scd Instructions available' CONFIG_CPU_HAS_LLDSCD
   bool '  Writeback Buffer available' CONFIG_CPU_HAS_WB
else
   if [ "$CONFIG_CPU_R3000"  = "y" -o \
        "$CONFIG_CPU_VR41XX" = "y" -o \
        "$CONFIG_CPU_TX39XX" = "y" ]; then
      if [ "$CONFIG_DECSTATION" = "y" ]; then
	 define_bool CONFIG_CPU_HAS_LLSC n
	 define_bool CONFIG_CPU_HAS_LLDSCD n
	 define_bool CONFIG_CPU_HAS_WB y
      else
	 define_bool CONFIG_CPU_HAS_LLSC n
	 define_bool CONFIG_CPU_HAS_LLDSCD n
	 define_bool CONFIG_CPU_HAS_WB n
      fi
   else
      if [ "$CONFIG_CPU_MIPS32" = "y" ]; then
	 define_bool CONFIG_CPU_HAS_LLSC y
	 define_bool CONFIG_CPU_HAS_LLDSCD n
	 define_bool CONFIG_CPU_HAS_WB n
      else
	 define_bool CONFIG_CPU_HAS_LLSC y
	 define_bool CONFIG_CPU_HAS_LLDSCD y
	 define_bool CONFIG_CPU_HAS_WB n
      fi
   fi
fi
if [ "$CONFIG_CPU_R3000" = "y" ]; then
   define_bool CONFIG_CPU_HAS_SYNC n
else
   define_bool CONFIG_CPU_HAS_SYNC y
fi
endmenu

mainmenu_option next_comment
comment 'General setup'
if [ "$CONFIG_DECSTATION"  = "y" -o \
     "$CONFIG_DDB5074"     = "y" -o \
     "$CONFIG_NINO"        = "y" -o \
     "$CONFIG_MIPS_COBALT" = "y" ]; then
   define_bool CONFIG_CPU_LITTLE_ENDIAN y
else
   bool 'Generate little endian code' CONFIG_CPU_LITTLE_ENDIAN
fi

if [ "$CONFIG_TOSHIBA_JMR3927" = "y" ]; then
   bool 'DS1742 BRAM/RTC support' CONFIG_RTC_DS1742
fi

if [ "$CONFIG_CPU_LITTLE_ENDIAN" = "n" ]; then
   bool 'Include IRIX binary compatibility' CONFIG_BINFMT_IRIX
   bool 'Include forward keyboard' CONFIG_FORWARD_KEYBOARD
fi

if [ "$CONFIG_CPU_R10000" = "y" ]; then
   dep_bool 'Support for large 64-bit configurations' CONFIG_MIPS_INSANE_LARGE $CONFIG_MIPS64
fi

if [ "$CONFIG_ARC32" = "y" ]; then
   bool 'ARC console support' CONFIG_ARC_CONSOLE
fi

if [ "$CONFIG_SGI_IP22" = "y" ]; then
   dep_bool 'Indigo-2 (IP22) EISA bus support' CONFIG_IP22_EISA $CONFIG_EXPERIMENTAL
fi

if [ "$CONFIG_IP22_EISA" = "y" ]; then
   define_bool CONFIG_EISA y
   bool '    ISA bus support' CONFIG_ISA
fi

bool 'Networking support' CONFIG_NET

if [ "$CONFIG_PCI" != "y" ]; then
   define_bool CONFIG_PCI n
fi

source drivers/pci/Config.in

if [ "$CONFIG_ISA" != "y" ]; then
   define_bool CONFIG_ISA n
   define_bool CONFIG_EISA n
else
   define_bool CONFIG_EISA y
fi

dep_bool 'TURBOchannel support' CONFIG_TC $CONFIG_DECSTATION
#dep_bool 'Access.Bus support' CONFIG_ACCESSBUS $CONFIG_TC

define_bool CONFIG_MCA n
define_bool CONFIG_SBUS n

bool 'Support for hot-pluggable devices' CONFIG_HOTPLUG

if [ "$CONFIG_HOTPLUG" = "y" ] ; then
   source drivers/pcmcia/Config.in
   source drivers/hotplug/Config.in
else
   define_bool CONFIG_PCMCIA n
   define_bool CONFIG_HOTPLUG_PCI n
fi

bool 'System V IPC' CONFIG_SYSVIPC
bool 'BSD Process Accounting' CONFIG_BSD_PROCESS_ACCT
bool 'Sysctl support' CONFIG_SYSCTL
define_bool CONFIG_KCORE_ELF y
define_bool CONFIG_KCORE_AOUT n
define_bool CONFIG_BINFMT_AOUT n
tristate 'Kernel support for ELF binaries' CONFIG_BINFMT_ELF
dep_bool 'Kernel support for Linux/MIPS 32-bit binary compatibility' CONFIG_MIPS32_COMPAT $CONFIG_MIPS64
define_bool CONFIG_BINFMT_ELF32 $CONFIG_MIPS32_COMPAT

tristate 'Kernel support for MISC binaries' CONFIG_BINFMT_MISC

dep_bool 'Power Management support (EXPERIMENTAL)' CONFIG_PM $CONFIG_EXPERIMENTAL $CONFIG_MIPS_AU1000
endmenu

source drivers/mtd/Config.in

source drivers/parport/Config.in

source drivers/pnp/Config.in

source drivers/block/Config.in
if [ "$CONFIG_BLK_DEV_INITRD" = "y" ]; then
   mainmenu_option next_comment
   comment 'MIPS initrd options'
   bool '  Embed root filesystem ramdisk into the kernel' CONFIG_EMBEDDED_RAMDISK
   endmenu
fi

source drivers/md/Config.in

if [ "$CONFIG_NET" = "y" ]; then
   source net/Config.in
fi

source drivers/telephony/Config.in

mainmenu_option next_comment
comment 'ATA/IDE/MFM/RLL support'

tristate 'ATA/IDE/MFM/RLL support' CONFIG_IDE

if [ "$CONFIG_IDE" != "n" ]; then
   source drivers/ide/Config.in
else
   define_bool CONFIG_BLK_DEV_IDE_MODES n
   define_bool CONFIG_BLK_DEV_HD n
fi
endmenu

mainmenu_option next_comment
comment 'SCSI support'

tristate 'SCSI support' CONFIG_SCSI

if [ "$CONFIG_SCSI" != "n" ]; then
   source drivers/scsi/Config.in
fi
endmenu

if [ "$CONFIG_PCI" = "y" ]; then
   source drivers/message/i2o/Config.in
fi

if [ "$CONFIG_NET" = "y" ]; then
   mainmenu_option next_comment
   comment 'Network device support'

   bool 'Network device support' CONFIG_NETDEVICES
   if [ "$CONFIG_NETDEVICES" = "y" ]; then
      source drivers/net/Config.in
      if [ "$CONFIG_ATM" = "y" ]; then
	 source drivers/atm/Config.in
      fi
   fi
   endmenu
fi

source net/ax25/Config.in

source net/irda/Config.in

if [ "$CONFIG_NET" != "n" ]; then
   mainmenu_option next_comment
   comment 'ISDN subsystem'

   tristate 'ISDN support' CONFIG_ISDN
   if [ "$CONFIG_ISDN" != "n" ]; then
      source drivers/isdn/Config.in
   fi
   endmenu
fi

if [ "$CONFIG_ISA" = "y" ]; then
   mainmenu_option next_comment
   comment 'Old CD-ROM drivers (not SCSI, not IDE)'

   bool 'Support non-SCSI/IDE/ATAPI CDROM drives' CONFIG_CD_NO_IDESCSI
   if [ "$CONFIG_CD_NO_IDESCSI" != "n" ]; then
      source drivers/cdrom/Config.in
   fi
   endmenu
fi

#
# input before char - char/joystick depends on it. As does USB.
#
source drivers/input/Config.in
source drivers/char/Config.in

#source drivers/misc/Config.in

if [ "$CONFIG_DECSTATION" = "y" ]; then
   mainmenu_option next_comment
   comment 'DECStation Character devices'

   tristate 'Standard/generic (dumb) serial support' CONFIG_SERIAL
   dep_bool '  DZ11 Serial Support' CONFIG_DZ $CONFIG_SERIAL
   dep_bool '  Z85C30 Serial Support' CONFIG_ZS $CONFIG_SERIAL $CONFIG_TC
   dep_bool '  Support for console on serial port' CONFIG_SERIAL_CONSOLE $CONFIG_SERIAL
#   dep_bool 'MAXINE Access.Bus mouse (VSXXX-BB/GB) support' CONFIG_DTOP_MOUSE $CONFIG_ACCESSBUS
   bool 'Enhanced Real Time Clock Support' CONFIG_RTC
   endmenu
fi

if [ "$CONFIG_SGI_IP22" = "y" ]; then
   mainmenu_option next_comment
   comment 'SGI Character devices'
   if [ "$CONFIG_VT" = "y" ]; then
      tristate 'SGI Newport Console support' CONFIG_SGI_NEWPORT_CONSOLE
      if [ "$CONFIG_SGI_NEWPORT_CONSOLE" = "y" ]; then
	 define_bool CONFIG_FONT_8x16 y
      fi
      define_bool CONFIG_DUMMY_CONSOLE y
   fi
   endmenu
fi

source fs/Config.in

source drivers/media/Config.in

if [ "$CONFIG_VT" = "y" ]; then
   mainmenu_option next_comment
   comment 'Console drivers'
   bool 'VGA text console' CONFIG_VGA_CONSOLE
   if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
      tristate 'MDA text console (dual-headed) (EXPERIMENTAL)' CONFIG_MDA_CONSOLE
      source drivers/video/Config.in
   fi
   endmenu
fi

mainmenu_option next_comment
comment 'Sound'

tristate 'Sound card support' CONFIG_SOUND
if [ "$CONFIG_SOUND" != "n" ]; then
   source drivers/sound/Config.in
fi
endmenu

if [ "$CONFIG_SGI_IP22" = "y" ]; then
   source drivers/sgi/Config.in
fi

source drivers/usb/Config.in

source net/bluetooth/Config.in

mainmenu_option next_comment
comment 'Kernel hacking'

bool 'Are you using a crosscompiler' CONFIG_CROSSCOMPILE
if [ "$CONFIG_SERIAL" = "y" -o "$CONFIG_AU1000_UART" = "y" ]; then
   bool 'Remote GDB kernel debugging' CONFIG_REMOTE_DEBUG
   dep_bool 'Console output to GDB' CONFIG_GDB_CONSOLE $CONFIG_REMOTE_DEBUG
fi
bool 'Enable run-time debugging' CONFIG_DEBUG
bool 'Magic SysRq key' CONFIG_MAGIC_SYSRQ
if [ "$CONFIG_SMP" != "y" ]; then
   bool 'Run uncached' CONFIG_MIPS_UNCACHED
fi
endmenu

source lib/Config.in
